{"version":3,"sources":["actions/types.js","actions/actions.js","components/board.js","sudokuMachine/sudokuApi.js","sudokuMachine/sudokuSolver.js","constants.js","components/buttons.js","App.js","reducers/boardReducerHelpers.js","reducers/boardReducer.js","index.js"],"names":["UPDATE_CELL","NEW_BOARD","RESET_BOARD","BACKTRACK_BOARD","SOLVE_INSTANTLY","VALIDATE_SOLUTION","UNDO_MOVE","BACKTRACK_SPEED","LEVELS_CHANGE","USER_PERFORMANCE","cellUpdateHandler","userInput","rowIndex","cellIndex","isCurrentlyBacktracking","type","types","payload","newBoardHandler","result","resetBoardHandler","useStyles","makeStyles","table","minWidth","borderStyle","borderWidth","borderColor","input","width","height","padding","backgroundColor","color","textAlign","border","fontWeight","fontSize","cell","thirdCell","borderRightStyle","borderRightWidth","borderRightColor","thirdRow","borderBottomStyle","borderBottomWidth","borderBottomColor","Board","useSelector","state","boardReducer","board","ogBoard","selectedRow","selectedCol","dispatch","useDispatch","classes","thirdStyle","idx","style","renderRow","row","rowIdx","rowStyle","key","className","map","col","colIdx","cellValue","cellIdx","cellStyle","inputStyle","isCellPlayable","extraStyle","alignText","value","onKeyPress","e","onChange","disabled","renderCell","Row","Col","Table","responsive","length","sudokuApiUrl","headersForSolution","headers","encodeParams","params","Object","keys","reduce","i","encodeURIComponent","join","getNewSudokuBoard","difficulty","a","axios","get","toLowerCase","newBoardRes","data","getSolutionOfSudokuBoard","post","solvedBoardRes","solution","getNewBoardAndSolveAsync","JSON","parse","stringify","solve","backTrackingResult","canSolveSudokuFromCell","isBackTrackingSolutionCorrect","equal","isBackTrackingSuccess","backtrackingChangesSteps","canPlaceValue","rowToPlace","colToPlace","numToPlace","rowError","toString","boxRows","Math","floor","boxCols","r","c","changeObject","push","array1","array2","LEVELS_LIST","INITIAL_STATE","isSolutionValid","history","backTrackingSpeed","slider","marginLeft","top","buttonCol","margin","Buttons","useState","show","setShow","isLoading","setLoading","backtrackId","setBacktrackId","requestForNewGame","eventKey","setLevel","level","backTrackMethod","backTrackSpeedChange","backTrackSpeedChangeHandler","solveInstantly","validateSolution","undoAction","levelChangeHandler","Modal","onHide","Header","closeButton","Body","ButtonGroup","Button","variant","onClick","size","clearTimeout","stopBackTrack","speed","round","timeoutId","setTimeout","backTrack","Slider","aria-label","orientation","min","max","defaultValue","val","App","Container","xl","implementUserInputandTable","newBoard","newHistory","valueToSwap","RegExp","test","parseInt","implementNewBoardState","newOgBoard","implementResetBoardState","implementStateToSolveInstantly","implementStateToValidateSolution","solutionBoard","currentBoard","implementStateUndoMove","previousBoard","slice","implementStateBackTrackingSpeed","implementStateBoardDifficulty","action","DIFFICULTIES_CHANGE","boardConflicts","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE,SAAU,EACVC,UAAW,EACXgE,MAAO,GAET,CACEjE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","file":"static/js/main.aa26e362.chunk.js","sourcesContent":["// types.js\nconst UPDATE_CELL = \"UPDATE_CELL\";\nconst NEW_BOARD = \"NEW_BOARD\";\nconst RESET_BOARD = \"RESET_BOARD\";\nconst BACKTRACK_BOARD = \"BACKTRACK_BOARD\";\nconst SOLVE_INSTANTLY = \"SOLVE_INSTANTLY\";\nconst VALIDATE_SOLUTION = \"VALIDATE_SOLUTION\";\nconst UNDO_MOVE = \"UNDO_MOVE\";\nconst BACKTRACK_SPEED = \"BACKTRACK_SPEED\";\nconst LEVELS_CHANGE = \"LEVELS_CHANGE\";\nconst USER_PERFORMANCE = \"USER_PERFORMANCE\";\n\nexport default {\n  UPDATE_CELL,\n  NEW_BOARD,\n  RESET_BOARD,\n  BACKTRACK_BOARD,\n  SOLVE_INSTANTLY,\n  VALIDATE_SOLUTION,\n  UNDO_MOVE,\n  BACKTRACK_SPEED,\n  LEVELS_CHANGE,\n  USER_PERFORMANCE,\n};\n","import types from \"./types\";\n\n/**\n * Action handler to update the value of a cell\n * Dipatched from:\n * - User inputs a value in an editable cell (Board-Component)\n * - Backtacking button (Buttons-Component)\n */\nconst cellUpdateHandler = (\n  userInput,\n  rowIndex,\n  cellIndex,\n  isCurrentlyBacktracking\n) => {\n  return {\n    type: types.UPDATE_CELL,\n    payload: {\n      userInput: userInput,\n      rowIndex: rowIndex,\n      cellIndex: cellIndex,\n      isCurrentlyBacktracking: isCurrentlyBacktracking,\n    },\n  };\n};\n\n/**\n * Action handler to get a new board\n * Dispatched from:\n * -New Board Button (Buttons-Component)\n */\nconst newBoardHandler = (result) => {\n  return {\n    type: types.NEW_BOARD,\n    payload: {\n      result: result,\n    },\n  };\n};\n\n/**\n * Action handler to reset board to its original state\n * Dispatched from:\n * -Reset Button (Buttons-Component)\n */\nconst resetBoardHandler = () => {\n  return {\n    type: types.RESET_BOARD,\n  };\n};\n\n/**\n * Action handler to backtrack board\n * Dispatched from:\n * N/A\n * Note : Thought i'd need it, might need later\n */\nconst backTrackBoardHandler = () => {\n  return {\n    type: types.BACKTRACK_BOARD,\n  };\n};\n\n/**\n * Action handler to modify how fast is backtracking\n * the board\n * Dispatched from:\n * - Slider (Buttons-component)\n */\nconst backTrackSpeedChangeHandler = (backTrackingSpeed) => {\n  return {\n    type: types.BACKTRACK_SPEED,\n    payload: {\n      backTrackingSpeed: backTrackingSpeed,\n    },\n  };\n};\n\n/**\n * Action handler to solve the board instantly\n * Using the API-given solution\n * Dispatched from:\n * -Solve Instantly Button (Buttons-Component)\n */\nconst solveInstantlyHandler = () => {\n  return {\n    type: types.SOLVE_INSTANTLY,\n  };\n};\n\n/**\n * Action handler to validate the current board\n * Is my current board the solution or not\n * Using the API-given solution\n * Dispatched from:\n * -Validate Button (Buttons-Component)\n */\nconst validateBoardHandler = () => {\n  return {\n    type: types.VALIDATE_SOLUTION,\n  };\n};\n\n/**\n * Action handler to undo the last move\n * Dispatched from:\n * -Undo Button (Buttons-Component)\n */\nconst undoMoveHandler = () => {\n  return {\n    type: types.UNDO_MOVE,\n  };\n};\n\n/**\n * Action to change game difficulty\n * Dispatched from:\n * -Difficulty Dropdown (Buttons-Component)\n */\nconst levelChangeHandler = (eventKey) => {\n  return {\n    type: types.LEVELS_CHANGE,\n    payload: {\n      eventKey: eventKey,\n    },\n  };\n};\n\n/**\n * Action to evaluate the current state of the board\n * Inform user on how they're doing\n * Dispatched from:\n * -How am i doing (Buttons-Component)\n */\nconst performanceHandler = () => {\n  return {\n    type: types.USER_PERFORMANCE,\n  };\n};\n\nexport {\n  cellUpdateHandler,\n  newBoardHandler,\n  resetBoardHandler,\n  backTrackBoardHandler,\n  solveInstantlyHandler,\n  validateBoardHandler,\n  undoMoveHandler,\n  backTrackSpeedChangeHandler,\n  levelChangeHandler,\n  performanceHandler,\n};\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { Table, Row, Col } from \"react-bootstrap\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport { cellUpdateHandler } from \"../actions/actions\";\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 800,\n    borderStyle: \"solid\",\n    borderWidth: 4,\n    borderColor: \"#black\",\n  },\n  input: {\n    width: \"100%\",\n    height: \"100%\",\n    padding: \"0.75rem\",\n    backgroundColor: \"white\",\n    color: \"#282c34\",\n    textAlign: \"center\",\n    border: \"none\",\n    \"&&:disabled\": {\n      fontWeight: \"normal\",\n      fontSize: \"1em\",\n      color: \"black\",\n    },\n  },\n  cell: {\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"black\",\n    padding: 0,\n    \"&&&:focus\": {\n      borderStyle: \"solid\",\n      borderWidth: 0.5,\n      borderColor: \"black\",\n      padding: 0,\n    },\n  },\n  thirdCell: {\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"black\",\n    borderRightStyle: \"solid\",\n    borderRightWidth: 4,\n    borderRightColor: \"black\",\n    padding: 0,\n    \"&&&:focus\": {\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      borderColor: \"black\",\n      borderRightStyle: \"solid\",\n      borderRightWidth: 4,\n      borderRightColor: \"black\",\n      padding: 0,\n    },\n  },\n  thirdRow: {\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"black\",\n    borderBottomStyle: \"solid\",\n    borderBottomWidth: 5,\n    borderBottomColor: \"black\",\n  },\n});\n\nconst Board = () => {\n  const {\n    board,\n    ogBoard,\n    selectedRow,\n    selectedCol,\n    isCurrentlyBacktracking,\n  } = useSelector((state) => ({\n    ...state.boardReducer,\n  }));\n  const dispatch = useDispatch();\n\n  //Create style classes\n  const classes = useStyles();\n\n  // Method to style third cell differently\n  const thirdStyle = (idx, style) => {\n    return idx && (idx + 1) % 3 === 0 ? style : classes.cell;\n  };\n\n  // Method that renders each cell of a row\n  const renderCell = (cellValue, cellIdx, rowIdx) => {\n    const cellStyle = thirdStyle(cellIdx, classes.thirdCell);\n    const inputStyle = classes.input;\n    const isCellPlayable = ogBoard[rowIdx][cellIdx] === 0;\n    let extraStyle = {};\n    if (\n      selectedRow === rowIdx &&\n      selectedCol === cellIdx &&\n      isCurrentlyBacktracking\n    ) {\n      extraStyle = {\n        backgroundColor: \"green\",\n      };\n    }\n    return (\n      <td\n        key={`${rowIdx}-${cellIdx}`}\n        className={cellStyle}\n        style={{\n          alignText: \"center\",\n          padding: 0,\n        }}\n      >\n        <input\n          value={cellValue ? cellValue : \"_\"}\n          style={extraStyle}\n          className={inputStyle}\n          onKeyPress={(e) =>\n            dispatch(cellUpdateHandler(e.key, rowIdx, cellIdx, false))\n          }\n          type=\"number\"\n          onChange={() => {\n            return; //need to put this because of consolo \"warning\"\n          }}\n          disabled={!isCellPlayable}\n        ></input>\n      </td>\n    );\n  };\n\n  // Method that renders board rows\n  const renderRow = (row, rowIdx) => {\n    const rowStyle = thirdStyle(rowIdx, classes.thirdRow);\n    return (\n      <tr key={`row-${rowIdx}`} className={rowStyle}>\n        {row.map((col, colIdx) => {\n          return renderCell(col, colIdx, rowIdx);\n        })}\n      </tr>\n    );\n  };\n\n  // Produce the board\n  return (\n    <>\n      <Row className=\"board\">\n        <Col>\n          <Table\n            responsive=\"xl\"\n            style={{\n              borderStyle: \"solid\",\n              borderWidth: 4,\n              borderColor: \"#black\",\n            }}\n          >\n            <tbody>\n              {board && board.length ? (\n                board.map((row, rowIdx) => {\n                  return renderRow(row, rowIdx);\n                })\n              ) : (\n                <></>\n              )}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Board;\n","import axios from \"axios\";\n\n//The api urls\n//validate will not be used, i think...\nconst sudokuApiUrl = {\n  newBoard: \"https://sugoku.herokuapp.com/board\",\n  solveBoard: \"https://sugoku.herokuapp.com/solve\",\n  validateBoard: \"https://sugoku.herokuapp.com/validate\",\n};\n\n//headers\nconst headersForSolution = {\n  headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n};\n\n/**\n * API instructions to encode the board before posting it\n */\nconst encodeBoard = (board) =>\n  board.reduce(\n    (result, row, i) =>\n      result +\n      `%5B${encodeURIComponent(row)}%5D${i === board.length - 1 ? \"\" : \"%2C\"}`,\n    \"\"\n  );\n\nconst encodeParams = (params) =>\n  Object.keys(params)\n    .map((key) => key + `= %5B${encodeBoard(params[key])}%5D`)\n    .join(\"&\");\n\n/**\n * Promise\n * GET new board\n */\nexport const getNewSudokuBoardPromise = () => {\n  return axios\n    .get(sudokuApiUrl.newBoard)\n    .then((response) => {\n      return response.data.board;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\n/**\n * Promise\n * POST new board\n * result in solution of the game\n */\nexport const getSolutionOfSudokuBoardPromise = (board) => {\n  return axios\n    .post(\n      sudokuApiUrl.solveBoard,\n      encodeParams({ board: board }),\n      headersForSolution\n    )\n    .then((response) => {\n      return response.data.solution;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\n/**\n * Async\n * GET new board\n */\nexport const getNewSudokuBoard = async (difficulty) => {\n  let newBoardRes = await axios.get(sudokuApiUrl.newBoard, {\n    params: {\n      difficulty: difficulty ? difficulty.toLowerCase() : \"easy\",\n    },\n  });\n  let board = newBoardRes.data.board;\n  return board;\n};\n\n/**\n * Async\n * POST new board\n * result in solution of the game\n */\nexport const getSolutionOfSudokuBoard = async (board) => {\n  let solvedBoardRes = await axios.post(\n    sudokuApiUrl.solveBoard,\n    encodeParams({ board: board }),\n    headersForSolution\n  );\n  return solvedBoardRes.data.solution;\n};\n","import {\n  getNewSudokuBoardPromise,\n  getSolutionOfSudokuBoardPromise,\n  getNewSudokuBoard,\n  getSolutionOfSudokuBoard,\n} from \"./sudokuApi\";\n\n/**\n * Promise Function\n * 1) get a new board from the sugoku API : GET-REQUEST\n * 2) get the solution of the of newly generated board : POST-REQUEST\n * 3) keeps a copy of the original board : DEEP-CLONE\n */\nexport const getNewBoardAndSolvePromise = () => {\n  return getNewSudokuBoardPromise()\n    .then((board) => {\n      return getSolutionOfSudokuBoardPromise(board).then((solution) => {\n        return solve(board, solution, JSON.parse(JSON.stringify(board)));\n      });\n    })\n    .then((all) => {\n      return all;\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};\n\n/**\n * ASYNC Function\n * 1) get a new board from the sugoku API : GET-REQUEST\n * 2) get the solution of the of newly generated board : POST-REQUEST\n * 3) keeps a copy of the original board : DEEP-CLONE\n * Note: Similar to the Promise function but Async\n */\nexport const getNewBoardAndSolveAsync = async (difficulty) => {\n  let board = await getNewSudokuBoard(difficulty);\n  let ogBoard = JSON.parse(JSON.stringify(board));\n  let solution = await getSolutionOfSudokuBoard(board);\n  let result = solve(board, solution, ogBoard);\n  return result;\n};\n\n/**\n * Where the backtracking algorithm is called\n * 1) Solves given board\n * 2) Populates an array with the detailed steps\n * that the backtracking algorithm took\n * 3) Checks if the backtracking algorithm solution worked\n * & its solution is correct\n */\nexport const solve = (board, solution, ogBoard) => {\n  const backtrackingChangesSteps = [];\n  const backTrackingResult = canSolveSudokuFromCell(\n    board,\n    0,\n    0,\n    backtrackingChangesSteps\n  );\n  const isBackTrackingSolutionCorrect = equal(\n    backTrackingResult.board,\n    solution\n  );\n  return {\n    isBackTrackingSuccess: backTrackingResult.isBackTrackingSuccess,\n    solution: solution,\n    board: backTrackingResult.board,\n    backtrackingChangesSteps: backTrackingResult.backtrackingChangesSteps,\n    isBackTrackingSolutionCorrect: isBackTrackingSolutionCorrect,\n    ogBoard: ogBoard,\n  };\n};\n\n/**\n * Takes indexes and a value to place\n * Checks if the value would conflict with the rules of sudoku\n * Basically, if the given number is a safe option for the chosen cell\n */\nconst canPlaceValue = (board, rowToPlace, colToPlace, numToPlace) => {\n  //Check if the number is possible to put in the COLUMN OF columnToPlace\n  let rowError = 0;\n  for (const row of board) {\n    if (row[colToPlace] === numToPlace) {\n      let message =\n        \"caught column conflict at [\" +\n        rowError +\n        \"][\" +\n        colToPlace +\n        \"] with :\" +\n        row[colToPlace];\n      message.toString();\n      return false;\n    }\n    rowError = rowError + 1;\n  }\n\n  //Check if the number is possible to put in the ROW OF rowToPlace\n  for (let i = 0; i < board[rowToPlace].length; i++) {\n    if (numToPlace === board[rowToPlace][i]) {\n      let message =\n        \"caught ROW conflict with : [\" +\n        rowToPlace +\n        \"][\" +\n        i +\n        \"] with: \" +\n        board[rowToPlace][i];\n      message.toString();\n      return false;\n    }\n  }\n\n  //Check if the number is possible to place in the sub-box\n  let boxRows = Math.floor(rowToPlace / 3) * 3;\n  let boxCols = Math.floor(colToPlace / 3) * 3;\n\n  for (let r = 0; r < 3; r++) {\n    for (let c = 0; c < 3; c++) {\n      if (board[boxRows + r][boxCols + c] === numToPlace) {\n        let message =\n          \"caught box conflict at : [\" +\n          (boxRows + r) +\n          \"][\" +\n          (boxCols + c) +\n          \"] with value : \" +\n          board[boxRows + r][boxCols + c];\n        message.toString();\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Where the magic (recursion) happens\n * Solves the sudoku board\n */\nconst canSolveSudokuFromCell = (\n  board,\n  rowToPlace,\n  colToPlace,\n  backtrackingChangesSteps\n) => {\n  //Those values are usually 0,0\n  let row = rowToPlace;\n  let col = colToPlace;\n\n  //Go to the next row if all columns are already filled out\n  //Or return solution if already went through all the possible cells\n  if (col === board[row].length) {\n    col = 0;\n    row = row + 1;\n\n    //This means that we reached the end of the sudoku board\n    if (row === board.length) {\n      return {\n        isBackTrackingSuccess: true,\n        board: board,\n        backtrackingChangesSteps: backtrackingChangesSteps,\n      };\n    }\n  }\n\n  // Skip entries already filled out. They already have a value in them (not editable).\n  if (board[row][col] !== 0) {\n    return canSolveSudokuFromCell(\n      board,\n      row,\n      col + 1,\n      backtrackingChangesSteps\n    );\n  }\n\n  //Go through all the possible numbers to be put in the cell\n  //if successfull, go to the next column\n  for (let value = 1; value <= board.length; value++) {\n    const numToPlace = value;\n    if (canPlaceValue(board, row, col, numToPlace)) {\n      board[row][col] = numToPlace;\n      let changeObject = { rowIndex: row, cellIndex: col, value: numToPlace };\n      //keep track of the decisions made\n      backtrackingChangesSteps.push(changeObject);\n      if (\n        canSolveSudokuFromCell(board, row, col + 1, backtrackingChangesSteps)\n          .isBackTrackingSuccess\n      ) {\n        return {\n          isBackTrackingSuccess: true,\n          board: board,\n          backtrackingChangesSteps: backtrackingChangesSteps,\n        };\n      }\n      board[row][col] = 0; //if unsuccesfull reset value to 0\n    }\n  }\n\n  return {\n    isBackTrackingSuccess: false,\n    board: board,\n    backtrackingChangesSteps: backtrackingChangesSteps,\n  };\n};\n\n/**\n * Checks if two arrays (only populated with numbers) are equal\n */\nexport const equal = (array1, array2) => {\n  return JSON.stringify(array1) === JSON.stringify(array2);\n};\n","const LEVELS_LIST = [\"Easy\", \"Medium\", \"Hard\", \"Random\"];\nconst INITIAL_STATE = {\n  isBackTrackingSuccess: true,\n  solution: [\n    [2, 6, 1, 5, 8, 3, 4, 9, 7],\n    [4, 3, 5, 1, 7, 9, 2, 6, 8],\n    [7, 8, 9, 2, 4, 6, 1, 3, 5],\n    [1, 2, 3, 4, 5, 7, 6, 8, 9],\n    [5, 4, 6, 3, 9, 8, 7, 1, 2],\n    [8, 9, 7, 6, 1, 2, 3, 5, 4],\n    [3, 1, 4, 8, 2, 5, 9, 7, 6],\n    [6, 7, 8, 9, 3, 4, 5, 2, 1],\n    [9, 5, 2, 7, 6, 1, 8, 4, 3],\n  ],\n  board: [\n    [0, 6, 0, 5, 0, 0, 0, 0, 0],\n    [0, 3, 0, 1, 7, 0, 0, 6, 0],\n    [7, 8, 0, 0, 4, 6, 0, 0, 5],\n    [1, 2, 0, 0, 0, 7, 6, 8, 0],\n    [5, 4, 0, 0, 0, 8, 0, 0, 0],\n    [0, 9, 0, 6, 0, 0, 3, 0, 4],\n    [3, 0, 4, 0, 0, 0, 0, 0, 6],\n    [6, 7, 0, 9, 3, 0, 0, 2, 0],\n    [9, 5, 2, 7, 0, 0, 0, 0, 3],\n  ],\n  backtrackingChangesSteps: [\n    {\n      rowIndex: 0,\n      cellIndex: 0,\n      value: 2,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 2,\n      value: 1,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 4,\n      value: 8,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 5,\n      value: 3,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 6,\n      value: 4,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 7,\n      value: 7,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 8,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 0,\n      value: 4,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 2,\n      value: 5,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 5,\n      value: 2,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 8,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 5,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 2,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 8,\n      value: 8,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 2,\n      value: 9,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 3,\n      value: 2,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 6,\n      value: 1,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 7,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 2,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 3,\n      value: 4,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 4,\n      value: 5,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 4,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 8,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 8,\n      value: 2,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 2,\n      value: 9,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 3,\n      value: 2,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 6,\n      value: 1,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 7,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 2,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 3,\n      value: 4,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 4,\n      value: 5,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 4,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 2,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 5,\n      value: 2,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 8,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 7,\n      value: 9,\n    },\n    {\n      rowIndex: 0,\n      cellIndex: 8,\n      value: 7,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 0,\n      value: 4,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 2,\n      value: 5,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 5,\n      value: 2,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 8,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 5,\n      value: 9,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 6,\n      value: 2,\n    },\n    {\n      rowIndex: 1,\n      cellIndex: 8,\n      value: 8,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 2,\n      value: 9,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 3,\n      value: 2,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 6,\n      value: 1,\n    },\n    {\n      rowIndex: 2,\n      cellIndex: 7,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 2,\n      value: 3,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 3,\n      value: 4,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 4,\n      value: 5,\n    },\n    {\n      rowIndex: 3,\n      cellIndex: 8,\n      value: 9,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 2,\n      value: 6,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 3,\n      value: 3,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 4,\n      value: 1,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 6,\n      value: 7,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 4,\n      value: 2,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 6,\n      value: 7,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 7,\n      value: 1,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 4,\n      value: 9,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 6,\n      value: 7,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 7,\n      value: 1,\n    },\n    {\n      rowIndex: 4,\n      cellIndex: 8,\n      value: 2,\n    },\n    {\n      rowIndex: 5,\n      cellIndex: 0,\n      value: 8,\n    },\n    {\n      rowIndex: 5,\n      cellIndex: 2,\n      value: 7,\n    },\n    {\n      rowIndex: 5,\n      cellIndex: 4,\n      value: 1,\n    },\n    {\n      rowIndex: 5,\n      cellIndex: 5,\n      value: 2,\n    },\n    {\n      rowIndex: 5,\n      cellIndex: 7,\n      value: 5,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 1,\n      value: 1,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 3,\n      value: 8,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 4,\n      value: 2,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 5,\n      value: 5,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 6,\n      value: 9,\n    },\n    {\n      rowIndex: 6,\n      cellIndex: 7,\n      value: 7,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 2,\n      value: 8,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 5,\n      value: 1,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 6,\n      value: 5,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 5,\n      value: 4,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 6,\n      value: 5,\n    },\n    {\n      rowIndex: 7,\n      cellIndex: 8,\n      value: 1,\n    },\n    {\n      rowIndex: 8,\n      cellIndex: 4,\n      value: 6,\n    },\n    {\n      rowIndex: 8,\n      cellIndex: 5,\n      value: 1,\n    },\n    {\n      rowIndex: 8,\n      cellIndex: 6,\n      value: 8,\n    },\n    {\n      rowIndex: 8,\n      cellIndex: 7,\n      value: 4,\n    },\n  ],\n  isBackTrackingSolutionCorrect: true,\n  ogBoard: [\n    [0, 6, 0, 5, 0, 0, 0, 0, 0],\n    [0, 3, 0, 1, 7, 0, 0, 6, 0],\n    [7, 8, 0, 0, 4, 6, 0, 0, 5],\n    [1, 2, 0, 0, 0, 7, 6, 8, 0],\n    [5, 4, 0, 0, 0, 8, 0, 0, 0],\n    [0, 9, 0, 6, 0, 0, 3, 0, 4],\n    [3, 0, 4, 0, 0, 0, 0, 0, 6],\n    [6, 7, 0, 9, 3, 0, 0, 2, 0],\n    [9, 5, 2, 7, 0, 0, 0, 0, 3],\n  ],\n  isSolutionValid: false,\n  history: [],\n  backTrackingSpeed: 5,\n  difficulty: \"Hard\",\n  selectedRow: 0,\n  selectedCol: 0,\n  isCurrentlyBacktracking: false,\n};\n\nexport { LEVELS_LIST, INITIAL_STATE };\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Row, Col, Button, ButtonGroup, Modal } from \"react-bootstrap\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport { getNewBoardAndSolveAsync } from \"../sudokuMachine/sudokuSolver\";\n\nimport {\n  newBoardHandler,\n  resetBoardHandler,\n  cellUpdateHandler,\n  solveInstantlyHandler,\n  validateBoardHandler,\n  undoMoveHandler,\n  backTrackSpeedChangeHandler,\n  levelChangeHandler,\n} from \"../actions/actions\";\n\nimport { LEVELS_LIST } from \"../constants\";\n\nconst useStyles = makeStyles({\n  slider: {\n    width: \"50%\",\n    marginLeft: \"5%\",\n    top: \"25%\",\n    color: \"blue\",\n  },\n  buttonCol: {\n    margin: \"2%\",\n  },\n});\n\nconst Buttons = () => {\n  const {\n    backtrackingChangesSteps,\n    backTrackingSpeed,\n    isSolutionValid,\n  } = useSelector((state) => ({\n    ...state.boardReducer,\n  }));\n\n  // Declaring states that handle events\n  const [show, setShow] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [backtrackId, setBacktrackId] = useState([]);\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const requestForNewGame = async (eventKey) => {\n    setLevel(eventKey);\n    let level = LEVELS_LIST[eventKey];\n    let result = await getNewBoardAndSolveAsync(level);\n    dispatch(newBoardHandler(result));\n  };\n\n  const backTrackMethod = (i) => {\n    i + 1 === backtrackingChangesSteps.length\n      ? setLoading(false)\n      : setLoading(true);\n\n    let { rowIndex, cellIndex, value } = backtrackingChangesSteps[i];\n    dispatch(cellUpdateHandler(value, rowIndex, cellIndex, true));\n  };\n\n  // Function to reset sudoku board when backtracking is stopped\n  const stopBackTrack = () => {\n    for (let i = 0; i < backtrackId.length; i++) {\n      if (i + 1 === backtrackId.length) {\n        setLoading(false);\n        dispatch(resetBoardHandler());\n      } else {\n        setLoading(true);\n      }\n      clearTimeout(backtrackId[i]);\n    }\n  };\n\n  const backTrack = () => {\n    dispatch(resetBoardHandler());\n    for (let i = 0; i < backtrackingChangesSteps.length; i++) {\n      const speed = Math.round(\n        backtrackingChangesSteps.length / backTrackingSpeed\n      );\n      const timeoutId = setTimeout(backTrackMethod, (i / 10) * speed, i);\n      backtrackId.push(timeoutId);\n      setBacktrackId(backtrackId);\n    }\n  };\n\n  const backTrackSpeedChange = (e) => {\n    dispatch(backTrackSpeedChangeHandler(e));\n  };\n\n  const resetBoard = () => {\n    dispatch(resetBoardHandler());\n  };\n\n  const solveInstantly = () => {\n    dispatch(solveInstantlyHandler());\n  };\n\n  const validateSolution = () => {\n    dispatch(validateBoardHandler());\n    isSolutionValid ? setShow(false) : setShow(true);\n  };\n\n  const undoAction = () => {\n    dispatch(undoMoveHandler());\n  };\n\n  const setLevel = (eventKey) => {\n    dispatch(levelChangeHandler(eventKey));\n  };\n  const renderValidateModal = () => {\n    return (\n      <Modal show={show} onHide={() => setShow(false)}>\n        <Modal.Header closeButton />\n        <Modal.Body>Keep going. You can do this!! </Modal.Body>\n      </Modal>\n    );\n  };\n\n  const renderCongratulationsModal = () => {\n    return (\n      <Modal show={show} onHide={() => setShow(false)}>\n        <Modal.Header closeButton />\n        <Modal.Body>\n          Congratulations!! You have successfully solved the board\n        </Modal.Body>\n      </Modal>\n    );\n  };\n\n  return (\n    <>\n      {isSolutionValid ? renderCongratulationsModal() : renderValidateModal()}\n      <Row className=\"buttons\">\n        <Col className={classes.buttonCol}>\n          <ButtonGroup>\n            <Button\n              variant=\"outline-dark\"\n              disabled={isLoading}\n              onClick={async (eventKey) => await requestForNewGame(eventKey)}\n            >\n              Start\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => undoAction()}\n              disabled={isLoading}\n            >\n              Undo\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => resetBoard()}\n              disabled={isLoading}\n            >\n              Reset\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => solveInstantly()}\n              disabled={isLoading}\n            >\n              Solve\n            </Button>\n            <Button\n              size=\"md\"\n              variant=\"outline-dark\"\n              onClick={() => {\n                isLoading ? stopBackTrack() : backTrack();\n              }}\n            >\n              {isLoading ? \"Stop Backtracking\" : \"Run Backtracker\"}\n            </Button>\n            <Button\n              variant=\"outline-dark\"\n              onClick={() => validateSolution()}\n              disabled={isLoading}\n            >\n              Verify\n            </Button>\n          </ButtonGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col className={classes.buttonCol}>\n          <span>Speed :</span>\n          <Slider\n            aria-label=\"custom thumb label\"\n            orientation=\"horizontal\"\n            min={1}\n            max={50}\n            defaultValue={25}\n            onChange={(e, val) => backTrackSpeedChange(val)}\n            className={classes.slider}\n            disabled={isLoading}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport { Container, Col, Row } from \"react-bootstrap\";\n\nimport \"./css/App.css\";\n\nimport Board from \"./components/board\";\nimport Buttons from \"./components/buttons\";\n\nconst App = () => {\n  /**\n   * Render the Board Component\n   */\n  const renderBoard = () => {\n    return (\n      <Row className=\"board\">\n        <Col>\n          <Board />\n        </Col>\n        <Col>\n          <Buttons />\n        </Col>\n      </Row>\n    );\n  };\n  /**\n   * Render the Buttons Component\n   */\n  // const renderButtons = () => {\n  //   return <Buttons />;\n  // };\n\n  const renderHeader = () => {\n    return (\n      <Row className=\"App-header\">\n        <Col\n          xl={4}\n          style={{\n            textAlign: \"left\",\n          }}\n        ></Col>\n        <Col xl={4}>Sudoku Kudoku Breaker</Col>\n        <Col\n          xl={4}\n          style={{\n            textAlign: \"right\",\n          }}\n        ></Col>\n      </Row>\n    );\n  };\n\n  /**\n   * Render ALL THE APP\n   */\n  return (\n    <div>\n      <Container className=\"App\">\n        {renderHeader()}\n        {renderBoard()}\n        {/* {renderButtons()} */}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import { equal } from \"../sudokuMachine/sudokuSolver\";\nimport { INITIAL_STATE, LEVELS_LIST } from \"../constants\";\n\nexport const implementUserInputandTable = (board, payload, history) => {\n  let newBoard = JSON.parse(JSON.stringify(board));\n  let newHistory = JSON.parse(JSON.stringify(history));\n  let { isCurrentlyBacktracking, rowIndex, cellIndex, userInput } = payload;\n\n  let valueToSwap = 0;\n  //Make sure it's a number between 1-9 the valid numbers for a sudoku board\n  let regular = new RegExp(\"^[1-9]*$\");\n  if (regular.test(userInput)) {\n    valueToSwap = parseInt(userInput);\n    newHistory.push(board);\n  }\n  newBoard[rowIndex][cellIndex] = valueToSwap;\n  return {\n    board: newBoard,\n    history: newHistory,\n    selectedRow: rowIndex,\n    selectedCol: cellIndex,\n    isCurrentlyBacktracking: isCurrentlyBacktracking,\n  };\n};\n\nexport const implementNewBoardState = (payload) => {\n  let newOgBoard = JSON.parse(JSON.stringify(payload.result.ogBoard));\n\n  return {\n    ...INITIAL_STATE,\n    isBackTrackingSuccess: payload.result.isBackTrackingSuccess,\n    solution: payload.result.solution,\n    board: newOgBoard,\n    isBackTrackingSolutionCorrect: payload.result.isBackTrackingSolutionCorrect,\n    ogBoard: payload.result.ogBoard,\n    backtrackingChangesSteps: payload.result.backtrackingChangesSteps,\n  };\n};\n\nexport const implementResetBoardState = (ogBoard) => {\n  let newOgBoard = INITIAL_STATE.ogBoard;\n  if (ogBoard.length) {\n    newOgBoard = JSON.parse(JSON.stringify(ogBoard));\n  }\n  return {\n    board: newOgBoard,\n    history: INITIAL_STATE.history,\n    isSolutionValid: INITIAL_STATE.isSolutionValid,\n    selectedRow: INITIAL_STATE.selectedRow,\n    selectedCol: INITIAL_STATE.selectedCol,\n    isCurrentlyBacktracking: INITIAL_STATE.isCurrentlyBacktracking,\n  };\n};\n\nexport const implementStateToSolveInstantly = (solution) => {\n  return {\n    board:\n      solution && solution.length\n        ? JSON.parse(JSON.stringify(solution))\n        : INITIAL_STATE.solution,\n  };\n};\n\nexport const implementStateToValidateSolution = (\n  board,\n  solution,\n  isSolutionValid,\n  isCurrentlyBacktracking\n) => {\n  let solutionBoard =\n    solution && solution.length ? solution : INITIAL_STATE.solution;\n  let currentBoard = board && board.length ? board : INITIAL_STATE.board;\n  if (equal(solutionBoard, currentBoard)) {\n    return {\n      isSolutionValid: true,\n      isCurrentlyBacktracking: isCurrentlyBacktracking,\n    };\n  } else {\n    return {\n      isSolutionValid: false,\n    };\n  }\n};\n\nexport const implementStateUndoMove = (history) => {\n  if (history && history.length) {\n    const previousBoard = history[history.length - 1];\n    const newHistory = history.slice(0, history.length - 1);\n    return {\n      history: newHistory,\n      board: previousBoard,\n      isSolutionValid: false,\n      isCurrentlyBacktracking: false,\n    };\n  }\n  return {};\n};\n\nexport const implementStateBackTrackingSpeed = (payload) => {\n  return {\n    backTrackingSpeed: payload.backTrackingSpeed,\n  };\n};\n\nexport const implementStateBoardDifficulty = (payload) => {\n  return {\n    difficulty: LEVELS_LIST[payload.eventKey],\n  };\n};\n","import types from \"../actions/types\";\nimport {\n  implementNewBoardState,\n  implementUserInputandTable,\n  implementResetBoardState,\n  implementStateToSolveInstantly,\n  implementStateToValidateSolution,\n  implementStateUndoMove,\n  implementStateBackTrackingSpeed,\n  implementStateBoardDifficulty,\n} from \"./boardReducerHelpers\";\n\nimport { INITIAL_STATE } from \"../constants\";\n\nconst boardReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.UPDATE_CELL:\n      return {\n        ...state,\n        ...implementUserInputandTable(\n          state.board,\n          action.payload,\n          state.history\n        ),\n      };\n    case types.NEW_BOARD:\n      return {\n        ...state,\n        ...implementNewBoardState(action.payload),\n      };\n    case types.RESET_BOARD:\n      return {\n        ...state,\n        ...implementResetBoardState(state.ogBoard),\n      };\n    case types.BACKTRACK_BOARD:\n      return {\n        ...state,\n      };\n    case types.SOLVE_INSTANTLY:\n      return {\n        ...state,\n        ...implementStateToSolveInstantly(state.solution),\n      };\n    case types.VALIDATE_SOLUTION:\n      return {\n        ...state,\n        ...implementStateToValidateSolution(\n          state.board,\n          state.solution,\n          state.isSolutionValid,\n          state.isCurrentlyBacktracking\n        ),\n      };\n    case types.UNDO_MOVE:\n      return {\n        ...state,\n        ...implementStateUndoMove(state.history),\n      };\n    case types.BACKTRACK_SPEED:\n      return {\n        ...state,\n        ...implementStateBackTrackingSpeed(action.payload),\n      };\n    case types.DIFFICULTIES_CHANGE:\n      return {\n        ...state,\n        ...implementStateBoardDifficulty(action.payload),\n      };\n    case types.USER_PERFORMANCE:\n      return {\n        ...state,\n        boardConflicts: [{ row: 1 }],\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\n\nexport default boardReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./css/index.css\";\n\nimport App from \"./App\";\nimport { boardReducer } from \"./reducers/reducers\";\n\n/**\n * Combines all the reducers\n */\nconst rootReducer = combineReducers({\n  boardReducer,\n});\n\n/**\n * Creates redux store\n * Note: the window line is to be able to debug using redux-extension\n */\nconst store = createStore(\n  rootReducer,\n  {},\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n/**\n * Render this bad-boy in the root\n */\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}